import org.gradle.internal.jvm.Jvm
import javax.tools.JavaCompiler

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE')
    }
}



plugins {
  id "org.sonarqube" version "2.6.2"
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


bootJar {
    baseName = 'simple-server'
    version =  '0.2'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 10
targetCompatibility = 10

wrapper {
    gradleVersion = '5.1.1'
}

task copyMyCompileDeps(type: Copy) {
    dependsOn build
    from configurations.compileClasspath
    into "$buildDir/compile-deps"
}


// Does not work in Gradle 5 - Fix later.
task printMyGradleVersion {
    doLast {
        final Jvm myJvmVersion = Jvm.current()
        //final GradleVersion myGradleVersion = GradleVersion.current()
        //println "Using JVM: ${myJvmVersion}, and Gradle: ${myGradleVersion.version}"
        println "Using JVM: ${myJvmVersion}"
    }
}


ext{
    // Dependencies.
    // Honor Spring Boot 2.0.5 versions:
    // https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-dependency-versions.html
    jsonVersion = '20180813'
    groovyVersion = '2.4.15'
    // Exception here. Spring Boot uses JUnit 4.12, but let's use latest JUnit5.
    // See: https://dzone.com/articles/spring-boot-2-with-junit-5-and-mockito-2-for-unit
    junitVersion = '5.2.0'
    mockitJunitJupiterVersion = '2.18.3'
    opencsvVersion = '4.3.1'
    jsonPathVersion = '2.4.0'
    commonsCodecVersion = '1.11'
    jjwtVersion = '0.10.5'
    gsonVersion = '2.8.5'
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    // NOTE: Use " (not ' ) when referring to variables!
    implementation("org.json:json:$jsonVersion")
    implementation("com.opencsv:opencsv:$opencsvVersion")
    implementation("org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion")
    implementation("commons-codec:commons-codec:$rootProject.ext.commonsCodecVersion")
    implementation("io.jsonwebtoken:jjwt-api:$rootProject.ext.jjwtVersion")
    implementation("com.google.code.gson:gson:$rootProject.ext.gsonVersion")    
    runtime("io.jsonwebtoken:jjwt-impl:$rootProject.ext.jjwtVersion")
    runtime("io.jsonwebtoken:jjwt-jackson:$rootProject.ext.jjwtVersion")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit.junit'
        exclude group: 'com.vaadin.external.google'
    }
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation("org.mockito:mockito-junit-jupiter:$mockitJunitJupiterVersion")
    testImplementation("com.jayway.jsonpath:json-path:$jsonPathVersion")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")           
}


test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}
