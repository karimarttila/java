import org.gradle.internal.jvm.Jvm
import javax.tools.JavaCompiler

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE')
    }
}



plugins {
  id "org.sonarqube" version "2.6.2"
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


bootJar {
    baseName = 'simple-server'
    version =  '0.1'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 10
targetCompatibility = 10

wrapper {
    gradleVersion = '4.10.2'
}


task printMyGradleVersion {
    doLast {
        final Jvm myJvmVersion = Jvm.current()
        final GradleVersion myGradleVersion = GradleVersion.current()
        println "Using JVM: ${myJvmVersion}, and Gradle: ${myGradleVersion.version}"
    }
}


ext{
    // Dependencies.
    // Honor Spring Boot 2.0.5 versions:
    // https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-dependency-versions.html
    jsonVersion = '20180813'
    groovyVersion = '2.4.15'
    // Exception here. Spring Boot uses JUnit 4.12, but let's use latest JUnit5.
    // See: https://dzone.com/articles/spring-boot-2-with-junit-5-and-mockito-2-for-unit
    junitVersion = '5.2.0'
    mockitJunitJupiterVersion = '2.18.3'
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    // NOTE: Use " (not ' ) when referring to variables!
    compile("org.json:json:$jsonVersion")
    compile("org.codehaus.groovy:groovy-all:$rootProject.ext.groovyVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")       
    testCompile("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testCompile "org.mockito:mockito-core:2.+"
    testCompile("org.mockito:mockito-junit-jupiter:$mockitJunitJupiterVersion")
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit.junit'
    }
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}
